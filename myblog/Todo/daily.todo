
emberjs学习总结
---------------------------------------------------------------------------------------------------------
2017-08:
  
每日记录:

✔ 08-01 @done (17-08-03 11:13)
学习emberjs2.0，看了Getting started部分，30%Tutorial。
1. CLI很有用，除了支持build、server这些功能，还可以create组件、路由等；
emberjs封装了很多东西，方便却也显得不是那么“灵活”，例如es 2015的转义已经默认配置好了使用babel，但是若使用TS，那么则不太需要babel。emberjs似乎帮用户规定好了js的方言使用习惯;
2. 对比模板语言，Handlebars的模板语言略显得不太友好，例如click事件，该模板语言在actions中默认支持click，{{action "showPerson" person}}，这样的描述一眼看过去很难知道其是定义一个click事件，而更像是一个m->v的绑定显示。对比ng2+的语法(click)="onClickMe()"，则更加“人性化”。
疑问：
ng2+的service概念，在emberjs中的何种形式存在；
操作dom方式。

✔ 08-02 @done (17-08-03 11:13)
emberjs Tutorial部分的：路由、model、插件、组件。值得注意的部分：
1.ember使用约定去指定router index默认为"/"；
2. mock由插件实现，mock数据使用Adapter实现，可以指定命名空间与路由URL进行区分；
3. ember的js与hbs对应，不是通过显示指定，而是通过一种约定（应该是文件同名），其组件的调用也是这样，因此需要注意下ember的命名规范；
4. 单元测试，支持phantomJS与Chrome作为dev，默认支持Qunit单元测试框架，CLI-test实现了类似于karma集成框架的功能。

✔ 08-03 @done (17-08-04 08:59)
1. Helper作用：类似于NG1+中的filter，NG2+中的pipe。数据预处理工作可以通过它来做。当然在ember2中，这些数据处理工作也可以在router中做；ng中复杂的数据处理工作最好可以放在service中做。
2. Model使用：定义数据结构，在NG2+中，可以利用TS的interface和class定义一个数据结构，后面继承class可以把这个数据结构实现。在NG1+中的做法通常是直接使用{}去定一个初始数据结构类。
3. 复杂的组件使用：例如ember应用，页面P1引入组件C，P1对应的
 

- input-helper
1. {{input}}与{{textarea}}helper，用于创建表单input、textarea。
其支持一些标准的HTML attributes，这些属性使用引号进行标注时，其作为属性存在，如果移除引用，则与属性进行值绑定。
{{input type="text" value=firstName disabled=entryNotAllowed size="50"}}
2. Actions为事件，事件关键词使用"-"分隔：
{{input value=firstName key-press="updateFirstName"}}
- action-helper
1. 语法：{{action "toggleBody"}}，在js中可以使用
actions: {
  toggleBody() {
    this.toggleProperty('isShowingBody');
  }
}
进行处理。
2. Action参数
在action名称后的值，将会作为参数进行传递，例如：
模板中：
{{action "select" post}}> {{post.title}}
js中：
actions: {
  select(post) {
    console.log(post.get('title'));
  }
}
3. 设置事件类型
使用on操作符，控制action事件的触发类型：
{{action "select" post on="mouseUp"}}
事件名称，使用驼峰命名方式
4. 允许修改action按键
{{action "anActionName" allowedKeys="alt"}}
使用alt按键，则使用alt按键代替click事件（click事件默认可以不设置，所以没显示）
5. 允许浏览器事件
<a href="newPage.htm" {{action "logClick" preventDefault=false}}>Go</a>
preventDefault设置浏览器行为是否被允许触发
6. 修改事件的第一个参数
可以把事件作为参数传递到js中，例如：
<input type="text" value={{favoriteBand}} onblur={{action "bandDidChange" value="target.value"}} />
actions: {
  bandDidChange(newValue) {
    console.log(newValue);
  }
}
-组件
1. 定义组件
组件名称至少包含一个破折号，组件定义为blog-post，那么会生成一个文件app/components/blog-post.js。
使用破折号连接多个单词的命名方式，能够避免重名问题。
2. 动态渲染组件
{{component}}helper能够被用于在运行时动态选择组件。如果选用{{my-component}}，那么只能渲染对应的这一个组件。
{{component 'blog-post'}} 与 {{blog-post}}相同。
3. 组件生命周期
4. 传递properties到组件中
{{blog-post title=post.title body=post.body}}
组件中的属性与外部传入属性形成双向绑定。
除了上述可以通过title、body获得参数外，还可以通过这样获得：
{{blog-post post.title post.body}}
const BlogPostComponent = Ember.Component.extend({});
BlogPostComponent.reopenClass({
  positionalParams: ['title', 'body']
});
5. 在组件中包装内容
/blog-post.hbs
<h1>{{title}}</h1>
<div class="body">{{yield}}</div>
/index.hbs
{{#blog-post title=title}}
  <p class="author">by {{author}}</p>
  {{body}}
{{/blog-post}}
#标记的组件名称，表示作用域；index.hbs中{{#blog-post}}{{/blog-post}}之间的内容可以插值到blog-post.hbs{{yield}}中。

-对象
1. es2015中的class在ember中并不常用，因为js的对象原型链继承问题；（ng中存在该问题，脏值检查时，对象属性不会做检查）。
2. ember object提供一个class系统，提供继承、实例化等功能：
const Person = Ember.Object.extend({
  helloWorld() {
    alert(`Hi, my name is ${this.get('name')}`);
  }
});
let tom = Person.create({
  name: 'Tom Dale'
});
tom.helloWorld();
在create()中，最好别重新定义一个父类已经定义的属性、已经存在的方法和新的方法。可以通过创建一个新的子类，并且实例化该子类来实现同样的效果。
3. 初始化instances
新的instance被创建，init()方法默认会被激活，当继承框架的类时，例如Ember.Component，需要调用this.super(...arguments)，否则会出现一些奇怪的问题。
Array和Object定义在Ember.Object上，他们被多个instances共享，需要在instance中创建init()方法。
4. 访问Object属性
使用get()、set()，否则属性不会被计算，observers和模板不会被更新。
5. reopen()、reopenClass()
reopen()可以覆盖calss已经存在的方法，可以调用this._super()；
reopenClass()可以增加一个静态方法和属性到class中，并不会改变class对应的instance。
6. 计算属性
第一次调用时计算，随后从缓存中获取值，而非再次调用函数。
@each可以遍历todos.@each.isDone
[]vs@each，当不考虑array中的item更新情况，可以考虑使用[]。

-模板语言Handlebars 
1. Helper可以代替计算属性做一些简单的计算：
import Ember from 'ember';
export function sum(params) {
  return params.reduce((a, b) => {
    return a + b;
  });
};
export default Ember.Helper.helper(sum);

2. 条件
{{if isFast "zoooom" "putt-putt-putt"}}
如果isFast为ture，则显示"zooom"，为false则显示"putt-putt-putt"
嵌套条件：
{{if isFast (if isFueled "zoooom")}}
块调用：
{{#if person}}
  Welcome back, <b>{{person.firstName}} {{person.lastName}}</b>!
{{/if}}
在helper名称前使用#号代表块调用，如果person为真，即非false, undefined, null, '', 0 or []
那么显示块中的内容。
if/else：
{{#if person}}
  Welcome back, <b>{{person.firstName}} {{person.lastName}}</b>!
{{else if isReading}}
  Please log in.
{{/if}}
unless：
与if相反
3. 显示item列表
{{#each}}：
{#each people as |person|}}
  <li>Hello, {{person.name}}!</li>
{{/each}}
使用index：
{{#each people as |person index|}}
  <li>Hello, {{person.name}}! You're number {{index}} in line</li>
{{/each}}
空列表：
{{#each people as |person|}}
  Hello, {{person.name}}!
{{else}}
  Sorry, nobody is here.
{{/each}}
{{#each-in}}：
显示对象的key与value
{{#each-in categories as |category products|}}
category为key，products为value

-Model
1. Model用于持久化，用户关闭浏览器时，数据不会丢失。
通常应用使用HTTP从服务端获取数据，Ember可以让用户通过用户的硬盘来使用IndexedDB。



HSmart  HSMAR-9（http://223.105.0.132:8088/projects/HSMAR/issues/HSMAR-9?filter=allissues）   使用ng2+、webpack、plantomJS搭建HSmart前端框架。

项目支撑
北京详单云  LM-193（http://223.105.0.132:8088/projects/LM/issues/LM-193?filter=allopenissues）  节点宕机、查询慢按月统计需求