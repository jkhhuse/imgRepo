

---------------------------------------------------------------------------------------------------------
第一周期:
  不放下前端，对日志相关的后端技术有较深入的认识。(20170425-20170630)
列表:
    ☐ 完成《css secrets》第七章与第六章的学习
    ☐ 完成《Javascript 高级程序设计》第八章与第九章的学习
    ☐ 学习syslog，重点学习syslog的概念、使用、支持插件、使用场景、如果有条件看看能不能测一下benchmark。
技能掌握:
1. 对syslog总体的认识、syslog的配置能够做到心中有数，且对syslog的理解更深一层
2. 熟悉了flume的配置规则及运行模式，并具备改写sink与拦截器的代码的初步能力。
3. yeoman简单搭建，解决了搭建环境的种种问题
4. Hadoop、HBase、Spark的伪分布式搭建及基本概念的了解，例如HBase的表、Rowkey、Column Family、Column Qualifier等概念的了解。
5. Spark的RDD概念由于接触时间太短，还未来得及研究。
6. underscore源码刚刚开始看，需要继续深入研究。
7. Linux命令的熟悉，例如netcat、telnet、netstat、tcpdump等
随记:
书还未看完，没有耐心看书，可能还要多加实践，在实践过程中配合看书。
强制自己看了一些英文文档，不过仍需要持续提升自己看英文文档的能力。
后端知识自己严重不熟悉，在实践过程中耽误很多时间，走了很多弯路。
---------------------------------------------------------------------------------------------------------

第二周期:
  yeoman涉及的各类前端知识，渐渐接触ES6的相关写法，如有条件继续接触一下后端的知识。(20170701-20170910)
列表:
    ☐ yeoman构建的page中基础只是的掌握
    ☐ 在架构基础上自己写一些前端代码
    ☐ AngulaJs4学习
    ☐ 对一些面试题中的关键点有所把握
技能掌握:
1. webpack基础，可以手动搭建一些基本的webpack工程，理解webpack中的概念；
2. typescript，基础语法掌握，但是模块化、命名空间、封装方式等高级用法还未掌握；
3. angular4.x，配合看过/动手调试过一些工程代码，把官方文档读了一遍，做到angular知识点的覆盖，当然也需要在实践中去强化框架的使用；
4. rxjs，花费了3-4天时间看了一遍文档，在项目中使用了基础功能，后续仍需要持续攻克rxjs；
5. bootstrap4，大致看了一部分文档，已经开始上手使用，着重了解了flex、栅格、scss等部分；
6. yeoman，使用过一段时间，npm install经常不能成功（可能被墙的原因吧，开了vpn也不行，没使用cnpm），感觉也不是很好用，现在一些框架提供CLI工具，例如angular后，直接使用CLI工具，完全可以放弃使用yeoman了。
随记:
工作产生一次变动，自己的职业规划也产生了一些变化。本来设想后端知识慢慢补足，后端技能也能够满足一般项目的需求，现在看来还是应该立足前端，掌握好自己的核心技能，切不可懈怠！
yeoman基本上了解大致的作用，生成的项目也看了一些，基本可以自己手动配置一些webpack的例子等。
在新项目中决定采用ng2+来做，是一个很好的熟悉ng2+的时机。
时刻鞭策自己，不要懈怠！
这段时间对scss、typescript、rxjs、angular4.x、webpack、bootstrap4、flex布局等做了较为系统的学习，基本在项目中都用起来了。
---------------------------------------------------------------------------------------------------------

第三周期:
  有针对性地补足第二阶段的不足之处。（20170911-20171201）
列表:
    ☐ typescript命名空间、模块化、封装等知识，也要包含es6的模块化知识的掌握；
    ☐ rxjs的应用场景，尝试使用rxjs做一些promise做不到的功能；
    ☐ flex使用不是很熟练，可以尝试去了解bootstrap中的flex是如何做的；
    ☐ 掌握js作用域概念；
    ☐ es6中掌握常用的语法；
    ☐ 在看angular的时候，跳过了css3的动画和单元测试部分，如果有需要则要学习一下；
    ☐ css3 animation库的学习（如果学有余力，一定要掌握这部分）；
随记:
  看到了一个ali的P6前端要求：
  熟悉 CSS 布局
  JavaScript 高级程序设计里面讲的东西都懂（JavaScript 权威指南真不适合做教程），原型，继承，闭包，抄一遍 lodash 源码就比一半的前端优秀了
  React，Vue 得会一个，会的意思不是知道 API 怎么调用，而是明白其特性，适用场景，核心优势，主要缺陷等看过 
  图解 HTTP，了解 HTTP2 的特性和针对性的性能优化能用 
  NodeJS 写一个简单的静态资源服务器，代码构建，单元测试什么的懂一些
  性能优化可以系统的说出来，不要简单列举一些点
  前端工程相关知识，静态资源怎么管理，怎么发布上线，怎么缓存和清除缓存，怎么快速回滚，怎么锁定依赖版本等
  如果有无线开发经验就更好了，RN，阿里的 weex 等
