// 请你来实现一个 atoi 函数，使其能将字符串转换成整数。

// 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

// 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

// 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

// 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

// 在任何情况下，若函数不能进行有效的转换时，请返回 0。

// 说明：

// 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

// 示例 1:

// 输入: "42"
// 输出: 42
// 示例 2:

// 输入: "   -42"
// 输出: -42
// 解释: 第一个非空白字符为 '-', 它是一个负号。
//      我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
// 示例 3:

// 输入: "4193 with words"
// 输出: 4193
// 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
// 示例 4:

// 输入: "words and 987"
// 输出: 0
// 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
//      因此无法执行有效的转换。
// 示例 5:

// 输入: "-91283472332"
// 输出: -2147483648
// 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
//      因此返回 INT_MIN (−231) 。

// 备注：这题主要是考察各种条件边界值的把握。例如：" "  000123 " 等几种情况的考虑，主要也是在这几种情况下的试错。

// PS: 其实对应在 js 中，parseInt 已经解决了本题中的一些需求，使用 parseInt 带来的效率提升也是很大，而且 lodash 中也是用了 es 中提供的方原生法。

/**
 * @param {string} str
 * @return {number}
 */
var myAtoi = function (str) {
    // 丢弃空格
    var s = str.trim();
    if ("" === s) { return 0 }
    // 判断首字符是否是有效字符
    var first = s[0];
    var mask = '';
    var num = '';
    var i = 0;
    if (first === '-' || first === '+') {
        mask = first;
        i = 1;
    }
    if (first.match(/-|\+|[0-9]/)) {
        if (s.length === 1 && (mask === '-' || mask === '+')) {
            return 0;
        }
        while(s[i]==='0') {
            i++;
        }
        while (i < s.length) {
            if (s[i].match(/[0-9]/)) {
                num += s[i];
                i++;
            } else {
                break;
            }
        }
    } else {
        return 0;
    }

    if (num.length === 0) {
        return 0;
    }

    var p = mask + num;

    if (mask !== '-' && num > Math.pow(2, 31) - 1) {
        return Math.pow(2, 31) - 1;
    } else if (mask === '-' && p < -Math.pow(2, 31)) {
        return -Math.pow(2, 31);
    } else {
        return p;
    }
};

console.log(myAtoi("  0000000000 "));